1. sub module: 메인 프로젝트와 서브 프로젝트에 의존하고 있다고 하고 그것을 모두 깃으로 관리해야 한다면
                     독립적으로 버전 관리되어야 하고, 

                     메인 프로젝트는 서브 프로젝트의 어떤 버전을 의존할 지 관리하고, 깃형태로 존재할 때
                     그것의 개념이 서브 모듈(sub module)이고 그것은 깃 저장소 안에 다른 깃 저장소를 분리해놓고
                     관리하는 것이다


2. git submodule init: 서브 모듈정보를 기반으로 로컬 환경설정 파일을 준비함

3. got clone 주소: 깃의 저장소를 복제해와서 특정 폴더 안에 넣는다.

4. git submodule update: 서브 모듈의 리모트 저장소(인터넷이나 네트워크 어딘가에 있는 저장소)에서 데이터를 가져오고 서브 모듈을 포함한
                                  checkout(저장소에서 특정 커밋이나 브랜치로 돌아가고 싶을 때 사용)해야할 
                                  커밋(의미있는 변경 작업들을 저장소에 기록하는 동작)정보를 가져와서 서브모듈 프로젝트에 대한 checkout을 한다.

5. rm -rf React: 디렉토리를 지우고 싶으면서(-r) 변경사항을 커밋하지 않은 상태(-f)일때 이고 React 디렉토리를
                      이런 식으로 한 것이다.

6. recursive: 깃에서의 이 옵션은 하위 서브모듈까지 모두 클론하는 기능을 한다.

7. rm -rf .git  # 기존 Git 삭제

8. git init -> 새 git 저장소 초기화

9. git remote add origin https://github.com/사용자명/저장소명.git  # 원격 저장소(깃 허브에 있는것) 연결

10. git add. -> 모든 파일 추가

11. git commit -m "Initial commit" -> 첫 번째 커밋

12. git push -u origin main  # GitHub에 업로드


c++ 프로젝트 깃허브에다 올리기: 

1. git init -> 깃 초기화

2. echo build/ > .gitignore
   echo bin/ >> .gitignore
   echo *.o >> .gitignore  -> .gitignore 파일을 만들어서 불필요한 파일을 제외합니다.
   echo *.exe >> .gitignore
   echo *.dll >> .gitignore
   echo *.so >> .gitignore

3. git remote add origin https://github.com/1jihoon/neo_dragon.git

   -> 깃허브에 있는 neo_dragon 저장소에다 연결하는 것이다.

4. git commit -m "Initial commit for neo_dragon"
 
   -> 커밋 메시지는 원하는 내용으로 변경 가능하다.

5. git branch -M main -> 깃 허브는 기본 브랜치 이름을 마스터에서 메인으로 바꿨기에 이리 하는 것이다.

6. git push -u origin master -> 마스터 브랜치에 올려서 끝난다.

7. cpp 파일과 header 파일 앞에 자물쇠 이미지가 있는 경우 그건 깃이 c++ 프로젝트를 관리하고 있다는
   뜻으로 생각하면 됨(걱정 안해도 된다네)

   자물쇠 이미지는 파일이 읽기 전용 상태이거나 현재 변경 되지 않은 파일임을 나타냄
   만약 여기서 수정하면 체크 표시(브이 모양)로 변경됨


텍스트 파일 갱신화

1. git status -> 갱신됐는지 확인하기(modified: git_study.txt 이렇게 써져있으면 성공함)

2. git add git_study.txt -> 변경된 파일을 깃에 추가

3. git commit -m "git_study.txt " -> 변경 사항을 깃에 저장(커밋)함 

git push -u origin master -> 변경사항을 깃허브에 업로드


c++ 프로젝트 커밋하기

프로젝트 내부에서도 가능함

1. 보기 -> git 변경 내용: 여기에 수정된 파일 목록이 나오면 변경 사항이 있다는 뜻이다.

2. 변경된 파일을 스테이징(추가)하기 -> 변경 사항 창에서 +(stage all)키를 누른다.

3. 커밋하기 -> 커밋 메시지 입력 부분에 간단히 적고 커밋 버튼을 누른다.

4. 푸시하기 -> 깃허브 원격 저장소에 업로드 하면 끝 